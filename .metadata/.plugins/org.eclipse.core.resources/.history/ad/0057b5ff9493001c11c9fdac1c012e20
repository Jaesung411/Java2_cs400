import java.util.List;
import java.util.Scanner;

public class Frontend implements IShowSearcherFrontend{

	IShowSearcherBackend back;
	String word;
	private static Scanner sc = new Scanner(System.in);
	
	// constructor args (IShowSearcherBackend) reads input from System.in
	public Frontend (IShowSearcherBackend back) {
		this.back = back;
	}
    // constructor args (String, IShowSearcherBackend) reads input from String
	public Frontend (String word, IShowSearcherBackend back) {
		this.back = back;
		this.word = word;
	}

	/**
     * This method drives the entire read, eval, print loop (repl) for the
     * Song Search App.  This loop will continue to run until the user
     * explicitly enters the quit command.
     */
	@Override
	public void runCommandLoop() {
		
		System.out.println("Welcome to the Show Seracher App!");
		System.out.println("==================================");
		
		String command;
		
		do{
			displayCommandMenu();
			System.out.println("Choose a command from the menu above: ");
			command = sc.nextLine();
			handleCommand(command);
		}while(!(command.equals("q") || command.equals("Q") || command.equals("4")));
		
	}

	 private static void handleCommand(String command) {
		 switch (command) {
		 	case "1":
		 	case "T":
		 	case "t":
		 		
		    	break;
		 	case "2":
		 	case "Y":
		 	case "y":
		        
		        break;
		 	case "3":
		 	case "F":
		 	case "f":
		    	
			    break;
		 	case "4":
		 	case "Q":
		 	case "q":
		    	break;
		    default:
		    	System.out.println("Invalid Command!");
		    	break;
		 	}

//		if(command.equals("1")||command.equals("t")||command.equals("T")) {
//			
//		}if(command.equals("2")||command.equals("y")||command.equals("Y")) {
//			
//		}if(command.equals("3")||command.equals("f")||command.equals("F")) {
//			
//		}if(command.equals("4")||command.equals("q")||command.equals("Q")) {
//			
//		}
		
	}
	 
	// to help make it easier to test the functionality of this program,
    // the following helper methods will help support runCommandLoop():
	
	@Override
	public void displayCommandMenu() {
		 // prints command options to System.out
	    System.out.println("Commands Menu:");
	    System.out.println("\t 1) Serach by [T]itle Word");
	    System.out.println("\t 2) Search by [Y]ear First Produced");
	    System.out.println("\t 3) [F]ilter by Streaming {rpvider");
	    System.out.println("\t 4) [Q]uit");
		
	}
	 
	// displays a list of shows
	@Override
	public void displayShows(List<IShow> shows) {
		for( int i = 0; i < shows.size(); i++) {
			System.out.println(i+1 + ". " + shows.get(i).getTitle());
			System.out.print("/t" + shows.get(i).getRating() + " " + "(" +shows.get(i).getYear() + ") " + "on: ");
			System.out.println(displayStreaming(shows.get(i)));
		}
		
	}
	
	private String displayStreaming (IShow show) {
		String ret = "";
		String n ="Neflix";
		String h = "Hulu";
		String p = "Prime Video";
		String d = "Disney+";
		String[] streaming = {n,h,p,d};
		for( String w :streaming) {
			if(show.isAvailableOn(w)) {
				ret += w +" ";
			}
		}
		return ret;
				
	}
	
	// reads word from System.in, displays results
	@Override
	public void titleSearch() {
		displayShows(this.back.searchByTitleWord(word));
	}

	 // reads year from System.in, displays results
	@Override
	public void yearSearch() {
		
	}
	
//	public static void main(String[] args) {
//		
//		Frontend frontend = new Frontend();
//		Show show1 = new Show("American Dad!",2005, 76, "Hula");
//		Show show2 = new Show("Final Fantasy XIV: Dad of Light",2017, 51, "Netflix");
//		Show show3 = new Show("Dad Stop Embarrassing Me!",2021, 48, "Netflix");
//		Show show4 = new Show("Date My Dad",2017, 42, "Prime Video");
//		Show show5 = new Show("Dinner with Dad",2017, 36, "Hula");
//		
//		Show[] show = new Show[] {show1,show2,show3,show4,show5};
//		List<IShow> showList = List.of(show1,show2,show3,show4,show5);
//		frontend.displayShows(showList);
//	}

}
